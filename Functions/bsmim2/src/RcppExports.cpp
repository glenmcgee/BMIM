// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bsmim_mcmc2
List bsmim_mcmc2(const arma::mat& yz, const Rcpp::List& Xlist, const double& b_lambda, const double& b_lambdaB, const double& a_sig, const double& b_sig, const double& tau02, const arma::vec& kappa, const bool& poly, const int& d, const bool& horseshoe, const bool& randint, const arma::mat& Bmat, const bool& draw_h, const int& n_inner, const int& n_outer, const int& n_burn);
RcppExport SEXP _bsmim2_bsmim_mcmc2(SEXP yzSEXP, SEXP XlistSEXP, SEXP b_lambdaSEXP, SEXP b_lambdaBSEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP tau02SEXP, SEXP kappaSEXP, SEXP polySEXP, SEXP dSEXP, SEXP horseshoeSEXP, SEXP randintSEXP, SEXP BmatSEXP, SEXP draw_hSEXP, SEXP n_innerSEXP, SEXP n_outerSEXP, SEXP n_burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yz(yzSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_lambda(b_lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_lambdaB(b_lambdaBSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau02(tau02SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type horseshoe(horseshoeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type randint(randintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bmat(BmatSEXP);
    Rcpp::traits::input_parameter< const bool& >::type draw_h(draw_hSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_inner(n_innerSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_outer(n_outerSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_burn(n_burnSEXP);
    rcpp_result_gen = Rcpp::wrap(bsmim_mcmc2(yz, Xlist, b_lambda, b_lambdaB, a_sig, b_sig, tau02, kappa, poly, d, horseshoe, randint, Bmat, draw_h, n_inner, n_outer, n_burn));
    return rcpp_result_gen;
END_RCPP
}
// bsmim_spikeslab_mcmc2
List bsmim_spikeslab_mcmc2(const arma::mat& yz, const Rcpp::List& Xlist, const double& a_lam, const double& b_lam, const double& b_lambdaB, const double& a_sig, const double& b_sig, const double& a_theta, const double& b_theta, const double& step_theta, const double& a_pi, const double& b_pi, const bool& poly, const int& d, const bool& randint, const arma::mat& Bmat, const bool& draw_h, const int& n_inner, const int& n_outer, const int& n_burn);
RcppExport SEXP _bsmim2_bsmim_spikeslab_mcmc2(SEXP yzSEXP, SEXP XlistSEXP, SEXP a_lamSEXP, SEXP b_lamSEXP, SEXP b_lambdaBSEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP a_thetaSEXP, SEXP b_thetaSEXP, SEXP step_thetaSEXP, SEXP a_piSEXP, SEXP b_piSEXP, SEXP polySEXP, SEXP dSEXP, SEXP randintSEXP, SEXP BmatSEXP, SEXP draw_hSEXP, SEXP n_innerSEXP, SEXP n_outerSEXP, SEXP n_burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yz(yzSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_lam(a_lamSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_lam(b_lamSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_lambdaB(b_lambdaBSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_theta(a_thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_theta(b_thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_theta(step_thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_pi(a_piSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_pi(b_piSEXP);
    Rcpp::traits::input_parameter< const bool& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type randint(randintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bmat(BmatSEXP);
    Rcpp::traits::input_parameter< const bool& >::type draw_h(draw_hSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_inner(n_innerSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_outer(n_outerSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_burn(n_burnSEXP);
    rcpp_result_gen = Rcpp::wrap(bsmim_spikeslab_mcmc2(yz, Xlist, a_lam, b_lam, b_lambdaB, a_sig, b_sig, a_theta, b_theta, step_theta, a_pi, b_pi, poly, d, randint, Bmat, draw_h, n_inner, n_outer, n_burn));
    return rcpp_result_gen;
END_RCPP
}
// bsmim_spikeslab_gaussprior_mcmc2
List bsmim_spikeslab_gaussprior_mcmc2(const arma::mat& yz, const Rcpp::List& Xlist, const double& a_lam, const double& b_lam, const double& b_lambdaB, const double& a_sig, const double& b_sig, const double& s_theta, const double& step_theta, const double& a_pi, const double& b_pi, const bool& poly, const int& d, const bool& randint, const arma::mat& Bmat, const bool& draw_h, const int& n_inner, const int& n_outer, const int& n_burn);
RcppExport SEXP _bsmim2_bsmim_spikeslab_gaussprior_mcmc2(SEXP yzSEXP, SEXP XlistSEXP, SEXP a_lamSEXP, SEXP b_lamSEXP, SEXP b_lambdaBSEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP s_thetaSEXP, SEXP step_thetaSEXP, SEXP a_piSEXP, SEXP b_piSEXP, SEXP polySEXP, SEXP dSEXP, SEXP randintSEXP, SEXP BmatSEXP, SEXP draw_hSEXP, SEXP n_innerSEXP, SEXP n_outerSEXP, SEXP n_burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yz(yzSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_lam(a_lamSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_lam(b_lamSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_lambdaB(b_lambdaBSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< const double& >::type s_theta(s_thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_theta(step_thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_pi(a_piSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_pi(b_piSEXP);
    Rcpp::traits::input_parameter< const bool& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type randint(randintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bmat(BmatSEXP);
    Rcpp::traits::input_parameter< const bool& >::type draw_h(draw_hSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_inner(n_innerSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_outer(n_outerSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_burn(n_burnSEXP);
    rcpp_result_gen = Rcpp::wrap(bsmim_spikeslab_gaussprior_mcmc2(yz, Xlist, a_lam, b_lam, b_lambdaB, a_sig, b_sig, s_theta, step_theta, a_pi, b_pi, poly, d, randint, Bmat, draw_h, n_inner, n_outer, n_burn));
    return rcpp_result_gen;
END_RCPP
}
// bsmim_informative_mcmc2
List bsmim_informative_mcmc2(const arma::mat& yz, const Rcpp::List& Xlist, const double& a_lam, const double& b_lam, const double& b_lambdaB, const double& a_sig, const double& b_sig, const double& s_theta, const double& step_theta, const double& a_pi, const double& b_pi, const bool& poly, const int& d, const bool& randint, const arma::mat& Bmat, const bool& draw_h, const arma::vec& thetaconstraint, const double a_slabpos, const double b_slabpos, const Rcpp::List& alphas, const double a_rho, const double b_rho, const int& n_inner, const int& n_outer, const int& n_burn);
RcppExport SEXP _bsmim2_bsmim_informative_mcmc2(SEXP yzSEXP, SEXP XlistSEXP, SEXP a_lamSEXP, SEXP b_lamSEXP, SEXP b_lambdaBSEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP s_thetaSEXP, SEXP step_thetaSEXP, SEXP a_piSEXP, SEXP b_piSEXP, SEXP polySEXP, SEXP dSEXP, SEXP randintSEXP, SEXP BmatSEXP, SEXP draw_hSEXP, SEXP thetaconstraintSEXP, SEXP a_slabposSEXP, SEXP b_slabposSEXP, SEXP alphasSEXP, SEXP a_rhoSEXP, SEXP b_rhoSEXP, SEXP n_innerSEXP, SEXP n_outerSEXP, SEXP n_burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yz(yzSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_lam(a_lamSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_lam(b_lamSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_lambdaB(b_lambdaBSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< const double& >::type s_theta(s_thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_theta(step_thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_pi(a_piSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_pi(b_piSEXP);
    Rcpp::traits::input_parameter< const bool& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type randint(randintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bmat(BmatSEXP);
    Rcpp::traits::input_parameter< const bool& >::type draw_h(draw_hSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetaconstraint(thetaconstraintSEXP);
    Rcpp::traits::input_parameter< const double >::type a_slabpos(a_slabposSEXP);
    Rcpp::traits::input_parameter< const double >::type b_slabpos(b_slabposSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const double >::type a_rho(a_rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type b_rho(b_rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_inner(n_innerSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_outer(n_outerSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_burn(n_burnSEXP);
    rcpp_result_gen = Rcpp::wrap(bsmim_informative_mcmc2(yz, Xlist, a_lam, b_lam, b_lambdaB, a_sig, b_sig, s_theta, step_theta, a_pi, b_pi, poly, d, randint, Bmat, draw_h, thetaconstraint, a_slabpos, b_slabpos, alphas, a_rho, b_rho, n_inner, n_outer, n_burn));
    return rcpp_result_gen;
END_RCPP
}
// bsmim_predict_old_cpp2
List bsmim_predict_old_cpp2(const arma::mat& yz, const Rcpp::List& Xlist, const Rcpp::List& thetalist, const Rcpp::List& psilist, const arma::mat& rho, const arma::mat& gamma, const arma::vec& lambdaInverse, const arma::vec& lambdaBInverse, const arma::vec& sigma2, const Rcpp::List& weightslist, const Rcpp::List& gridpointslist, const Rcpp::List& Xqlist, const bool& poly, const int& d, const bool& randint, const arma::mat& Bmat);
RcppExport SEXP _bsmim2_bsmim_predict_old_cpp2(SEXP yzSEXP, SEXP XlistSEXP, SEXP thetalistSEXP, SEXP psilistSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP lambdaInverseSEXP, SEXP lambdaBInverseSEXP, SEXP sigma2SEXP, SEXP weightslistSEXP, SEXP gridpointslistSEXP, SEXP XqlistSEXP, SEXP polySEXP, SEXP dSEXP, SEXP randintSEXP, SEXP BmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yz(yzSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type thetalist(thetalistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psilist(psilistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaInverse(lambdaInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaBInverse(lambdaBInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type weightslist(weightslistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type gridpointslist(gridpointslistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xqlist(XqlistSEXP);
    Rcpp::traits::input_parameter< const bool& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type randint(randintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bmat(BmatSEXP);
    rcpp_result_gen = Rcpp::wrap(bsmim_predict_old_cpp2(yz, Xlist, thetalist, psilist, rho, gamma, lambdaInverse, lambdaBInverse, sigma2, weightslist, gridpointslist, Xqlist, poly, d, randint, Bmat));
    return rcpp_result_gen;
END_RCPP
}
// bsmim_predict_cpp2
List bsmim_predict_cpp2(const arma::mat& yz, const Rcpp::List& Xlist, const Rcpp::List& thetalist, const Rcpp::List& psilist, const arma::mat& rho, const arma::mat& gamma, const arma::vec& lambdaInverse, const arma::vec& lambdaBInverse, const arma::vec& sigma2, const Rcpp::List& weightslist, const Rcpp::List& gridpointslist, const bool& poly, const int& d, const bool& randint, const arma::mat& Bmat);
RcppExport SEXP _bsmim2_bsmim_predict_cpp2(SEXP yzSEXP, SEXP XlistSEXP, SEXP thetalistSEXP, SEXP psilistSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP lambdaInverseSEXP, SEXP lambdaBInverseSEXP, SEXP sigma2SEXP, SEXP weightslistSEXP, SEXP gridpointslistSEXP, SEXP polySEXP, SEXP dSEXP, SEXP randintSEXP, SEXP BmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yz(yzSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type thetalist(thetalistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psilist(psilistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaInverse(lambdaInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaBInverse(lambdaBInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type weightslist(weightslistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type gridpointslist(gridpointslistSEXP);
    Rcpp::traits::input_parameter< const bool& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type randint(randintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bmat(BmatSEXP);
    rcpp_result_gen = Rcpp::wrap(bsmim_predict_cpp2(yz, Xlist, thetalist, psilist, rho, gamma, lambdaInverse, lambdaBInverse, sigma2, weightslist, gridpointslist, poly, d, randint, Bmat));
    return rcpp_result_gen;
END_RCPP
}
// bsmim_predict_approx_old_cpp2
List bsmim_predict_approx_old_cpp2(const arma::mat& yz, const Rcpp::List& Xlist, const Rcpp::List& thetalist, const Rcpp::List& psilist, const arma::mat& rho, const arma::mat& gamma, const arma::vec& lambdaInverse, const arma::vec& lambdaBInverse, const arma::vec& sigma2, const Rcpp::List& weightslist, const Rcpp::List& gridpointslist, const Rcpp::List& Xqlist, const bool& poly, const int& d, const bool& randint, const arma::mat& Bmat);
RcppExport SEXP _bsmim2_bsmim_predict_approx_old_cpp2(SEXP yzSEXP, SEXP XlistSEXP, SEXP thetalistSEXP, SEXP psilistSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP lambdaInverseSEXP, SEXP lambdaBInverseSEXP, SEXP sigma2SEXP, SEXP weightslistSEXP, SEXP gridpointslistSEXP, SEXP XqlistSEXP, SEXP polySEXP, SEXP dSEXP, SEXP randintSEXP, SEXP BmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yz(yzSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type thetalist(thetalistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psilist(psilistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaInverse(lambdaInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaBInverse(lambdaBInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type weightslist(weightslistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type gridpointslist(gridpointslistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xqlist(XqlistSEXP);
    Rcpp::traits::input_parameter< const bool& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type randint(randintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bmat(BmatSEXP);
    rcpp_result_gen = Rcpp::wrap(bsmim_predict_approx_old_cpp2(yz, Xlist, thetalist, psilist, rho, gamma, lambdaInverse, lambdaBInverse, sigma2, weightslist, gridpointslist, Xqlist, poly, d, randint, Bmat));
    return rcpp_result_gen;
END_RCPP
}
// bsmim_predict_approx_cpp2
List bsmim_predict_approx_cpp2(const arma::mat& yz, const Rcpp::List& Xlist, const Rcpp::List& thetalist, const Rcpp::List& psilist, const arma::mat& rho, const arma::mat& gamma, const arma::vec& lambdaInverse, const arma::vec& lambdaBInverse, const arma::vec& sigma2, const Rcpp::List& weightslist, const Rcpp::List& gridpointslist, const bool& poly, const int& d, const bool& randint, const arma::mat& Bmat);
RcppExport SEXP _bsmim2_bsmim_predict_approx_cpp2(SEXP yzSEXP, SEXP XlistSEXP, SEXP thetalistSEXP, SEXP psilistSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP lambdaInverseSEXP, SEXP lambdaBInverseSEXP, SEXP sigma2SEXP, SEXP weightslistSEXP, SEXP gridpointslistSEXP, SEXP polySEXP, SEXP dSEXP, SEXP randintSEXP, SEXP BmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yz(yzSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type thetalist(thetalistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psilist(psilistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaInverse(lambdaInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaBInverse(lambdaBInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type weightslist(weightslistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type gridpointslist(gridpointslistSEXP);
    Rcpp::traits::input_parameter< const bool& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type randint(randintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bmat(BmatSEXP);
    rcpp_result_gen = Rcpp::wrap(bsmim_predict_approx_cpp2(yz, Xlist, thetalist, psilist, rho, gamma, lambdaInverse, lambdaBInverse, sigma2, weightslist, gridpointslist, poly, d, randint, Bmat));
    return rcpp_result_gen;
END_RCPP
}
// bsmim_predict_indexwise_cpp2
List bsmim_predict_indexwise_cpp2(const arma::mat& yz, const Rcpp::List& Xlist, const Rcpp::List& thetalist, const Rcpp::List& psilist, const arma::mat& rho, const arma::mat& gamma, const arma::vec& lambdaInverse, const arma::vec& lambdaBInverse, const arma::vec& sigma2, const Rcpp::List& weightslist, const arma::mat& gridpoints, const Rcpp::List& Xmedianlist, const arma::vec& Eq, const int& crossM, const bool& poly, const int& d, const bool& randint, const arma::mat& Bmat);
RcppExport SEXP _bsmim2_bsmim_predict_indexwise_cpp2(SEXP yzSEXP, SEXP XlistSEXP, SEXP thetalistSEXP, SEXP psilistSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP lambdaInverseSEXP, SEXP lambdaBInverseSEXP, SEXP sigma2SEXP, SEXP weightslistSEXP, SEXP gridpointsSEXP, SEXP XmedianlistSEXP, SEXP EqSEXP, SEXP crossMSEXP, SEXP polySEXP, SEXP dSEXP, SEXP randintSEXP, SEXP BmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yz(yzSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type thetalist(thetalistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psilist(psilistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaInverse(lambdaInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaBInverse(lambdaBInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type weightslist(weightslistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gridpoints(gridpointsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xmedianlist(XmedianlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Eq(EqSEXP);
    Rcpp::traits::input_parameter< const int& >::type crossM(crossMSEXP);
    Rcpp::traits::input_parameter< const bool& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type randint(randintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bmat(BmatSEXP);
    rcpp_result_gen = Rcpp::wrap(bsmim_predict_indexwise_cpp2(yz, Xlist, thetalist, psilist, rho, gamma, lambdaInverse, lambdaBInverse, sigma2, weightslist, gridpoints, Xmedianlist, Eq, crossM, poly, d, randint, Bmat));
    return rcpp_result_gen;
END_RCPP
}
// bsmim_predict_X_cpp2
List bsmim_predict_X_cpp2(const arma::mat& yz, const Rcpp::List& Xlist, const Rcpp::List& thetalist, const Rcpp::List& psilist, const arma::mat& rho, const arma::mat& gamma, const arma::vec& lambdaInverse, const arma::vec& lambdaBInverse, const arma::vec& sigma2, const Rcpp::List& weightslist, const Rcpp::List& gridpointslist, const bool& poly, const int& d, const bool& randint, const arma::mat& Bmat);
RcppExport SEXP _bsmim2_bsmim_predict_X_cpp2(SEXP yzSEXP, SEXP XlistSEXP, SEXP thetalistSEXP, SEXP psilistSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP lambdaInverseSEXP, SEXP lambdaBInverseSEXP, SEXP sigma2SEXP, SEXP weightslistSEXP, SEXP gridpointslistSEXP, SEXP polySEXP, SEXP dSEXP, SEXP randintSEXP, SEXP BmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yz(yzSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type thetalist(thetalistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psilist(psilistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaInverse(lambdaInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaBInverse(lambdaBInverseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type weightslist(weightslistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type gridpointslist(gridpointslistSEXP);
    Rcpp::traits::input_parameter< const bool& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type randint(randintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bmat(BmatSEXP);
    rcpp_result_gen = Rcpp::wrap(bsmim_predict_X_cpp2(yz, Xlist, thetalist, psilist, rho, gamma, lambdaInverse, lambdaBInverse, sigma2, weightslist, gridpointslist, poly, d, randint, Bmat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bsmim2_bsmim_mcmc2", (DL_FUNC) &_bsmim2_bsmim_mcmc2, 17},
    {"_bsmim2_bsmim_spikeslab_mcmc2", (DL_FUNC) &_bsmim2_bsmim_spikeslab_mcmc2, 20},
    {"_bsmim2_bsmim_spikeslab_gaussprior_mcmc2", (DL_FUNC) &_bsmim2_bsmim_spikeslab_gaussprior_mcmc2, 19},
    {"_bsmim2_bsmim_informative_mcmc2", (DL_FUNC) &_bsmim2_bsmim_informative_mcmc2, 25},
    {"_bsmim2_bsmim_predict_old_cpp2", (DL_FUNC) &_bsmim2_bsmim_predict_old_cpp2, 16},
    {"_bsmim2_bsmim_predict_cpp2", (DL_FUNC) &_bsmim2_bsmim_predict_cpp2, 15},
    {"_bsmim2_bsmim_predict_approx_old_cpp2", (DL_FUNC) &_bsmim2_bsmim_predict_approx_old_cpp2, 16},
    {"_bsmim2_bsmim_predict_approx_cpp2", (DL_FUNC) &_bsmim2_bsmim_predict_approx_cpp2, 15},
    {"_bsmim2_bsmim_predict_indexwise_cpp2", (DL_FUNC) &_bsmim2_bsmim_predict_indexwise_cpp2, 18},
    {"_bsmim2_bsmim_predict_X_cpp2", (DL_FUNC) &_bsmim2_bsmim_predict_X_cpp2, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_bsmim2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
